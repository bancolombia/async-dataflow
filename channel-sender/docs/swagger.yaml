---
openapi: 3.0.0
info:
  title: API REST Async Data Flow Channel Sender
  description: Distributed Erlang/Elixir Cluster implementation of real time websockets notifications channels.
  license:
    name: MIT
    url: https://github.com/bancolombia/async-dataflow-channel-sender/blob/master/LICENSE
  version: 0.2.0
servers:
- url: https://virtserver.swaggerhub.com/santitigaga/async-data-flow-channel-sender/0.1.0
  description: SwaggerHub API Auto Mocking

paths:
  /create:
    post:
      tags:
      - /ext/channel
      summary: Create Channel and session
      description: |
        By passing in the appropriate options, you can register a new channel in the system
      operationId: createChannel
      requestBody:
        description: Channel to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelRequest'
      responses:
        "200":
          description: channel_ref and channel_secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials'
        "400":
          description: Bad request due to invalid body or missing required fields    
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBodyResponse'

  /deliver_message:
    post:
      tags:
      - /ext/channel
      summary: Deliver an event message to a channel or group of channels
      description: Deliver an event message to a previusly registered channel_ref, or deliver a message to all channels related to an specific app_ref or user_ref
      operationId: deliverMessage
      requestBody:
        description: "Triggers internal workflow to deliver message. The message may not be delivered immediately, or not at all. Depends if the channel_ref was previusly registered. The message_data schema is not enforced, but its recommeded to use CloudEvents."
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Message'
                - $ref: '#/components/schemas/AppMessage'
                - $ref: '#/components/schemas/UserMessage'
      responses:
        "202":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Bad request due to invalid body or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBodyResponse'       

  /deliver_batch:
    post:
      tags:
      - /ext/channel
      summary: Batch deliver up to 10 event messages
      description: Deliver event messages to a group of channel_refs
      operationId: deliverBatchMessages
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Messages'
      responses:
        "202":
          description: If all messages were accepted SuccessResponse is returned. If some messages were rejected PartialSuccessResponse is returned.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/PartialSuccessResponse'
        "400":
          description: Bad request due to invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBodyResponse'   
  /: 
    delete:
      tags:
      - /ext/channel
      summary: Perform a graceful shutdown of a channel processes 
      description: Perform a graceful shutdown of a channel process and related socket process, if any.
      operationId: stopChannel
      parameters:
        - name: channel_ref
          in: query
          description: The channel_ref to be stopped
          required: true
          schema:
            type: string
            example: beec634503c238f5b84f737275bfd4ba.855b8193bb6f419381eac6cc087aea3f
      responses:
        "202":
          description: If the operation is received and the channel will be signaled to stop
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Bad request due to missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBodyResponse'
                                 
components:
  schemas:
    Messages:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items: 
            $ref: '#/components/schemas/Message'  
    Message:
      required:
      - channel_ref
      - event_name
      - message_data
      - message_id
      type: object
      properties:
        channel_ref:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        correlation_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        message_data:
          type: object
          example: {"product_id": "1234", "product_name": "product name"}
        event_name:
          type: string
          example: event.productCreated
    AppMessage:
      required:
      - app_ref
      - event_name
      - message_data
      - message_id
      type: object
      properties:
        app_ref:
          type: string
          example: app01
        message_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        correlation_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        message_data:
          type: object
          example: {"product_id": "1234", "product_name": "product name"}
        event_name:
          type: string
          example: event.productCreated          
    UserMessage:
      required:
      - user_ref
      - event_name
      - message_data
      - message_id
      type: object
      properties:
        user_ref:
          type: string
          example: user.1
        message_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        correlation_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        message_data:
          type: object
          example: {"product_id": "1234", "product_name": "product name"}
        event_name:
          type: string
          example: event.productCreated              
    ChannelRequest:
      required:
      - application_ref
      - user_ref
      type: object
      properties:
        application_ref:
          type: string
          example: app01
        user_ref:
          type: string
          example: jhon.doe
    Credentials:
      required:
      - channel_ref
      - channel_secret
      type: object
      properties:
        channel_ref:
          type: string
          example: beec634503c238f5b84f737275bfd4ba.855b8193bb6f419381eac6cc087aea3f
        channel_secret:
          type: string
          example: SFMyNTY.g2gDaANtAAAAQWJlZWM2MzQ1MDNjMjM4ZjViODRmNzM3Mjc1YmZkNGJhLjg1NWI4MTkzYmI2ZjQxOTM4MWVhYzZjYzA4N2FlYTNmbQAAAAZ4eHh4eHhtAAAAB3h4eHh4eHhuBgDbcXMIlAFiAAFRgA.......
    SuccessResponse:
      type: object
      properties:
        result:
          type: string
          example: Ok
    PartialSuccessResponse:
      type: object
      properties:
        result:
          type: string
          example: partial-success
        accepted_messages:
          type: integer
          example: 5
        rejected_messages:
          type: integer
          example: 2
        discarded:
          type: array
          items:
            $ref: '#/components/schemas/Message'            
    InvalidBodyResponse:
      required:
      - error
      - request
      type: object
      properties:
        error:
          type: string
          example: Invalid request
        request:
          type: object
