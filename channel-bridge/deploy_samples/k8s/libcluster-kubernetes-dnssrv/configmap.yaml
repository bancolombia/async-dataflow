apiVersion: v1
kind: ConfigMap
metadata:
  name: adfbridge-config
  namespace: bridgenm
data:
  env.sh: |-
    #!/bin/sh
    export RELEASE_DISTRIBUTION=name
    export RELEASE_NODE=adf_bridge@$(hostname -f)
  config.yaml: |-
    bridge:
      port: 8080
      cloud_event_channel_identifier:
        - $.subject
      request_channel_identifier:
        - "$.req_headers['sub']"
      cloud_event_mutator:
        mutator_module: Elixir.BridgeCore.CloudEvent.Mutator.DefaultMutator

      channel_authenticator:
        auth_module: Elixir.BridgeRestapiAuth.PassthroughProvider

      event_bus:
        rabbitmq:
          bindings:
            - name: domainEvents
              routing_key:
                - business.#
          queue: adf_bridge_ex_queue
          
          ##
          ## Rabbitmq host and credentials can be configured with an AWS Secret, indicating the secret name.
          ## The secret must be a valid Json containing the following keys: "virtualhost", "hostname", "username",
          ## "password", "port". For example:
          ##
          ## { "username": <user name>, "password": <pw>, "hostname": <host>, "port": <port>, "virtualhost": <vhost>, "ssl": <true/false>}
          ##
          # secret: rabbitmq-secret

          ##
          ## Optionally and for local dev environments  Rabbitmq host and credentials can be configured directly 
          ## here:
          username: 
          password: 
          hostname: rabbitmq-service.rabbitmq.svc.cluster.local
          port: 5671
          virtualhost: /
          ssl: false

          ## producer and processor concurrency
          producer_concurrency: 1
          producer_prefetch: 2
          processor_concurrency: 2
          processor_max_demand: 1

      topology:
        strategy: Elixir.Cluster.Strategy.Kubernetes.DNSSRV
        config: 
          service: "adfbridge-headless"
          application_name: "adf_bridge"
          namespace: "bridgenm"
          polling_interval: 5000

      secrets:
        # Default. implemented in app apps/bridge_secretsmanager.
        # You can implement your own, please refer to `BridgeCore.SecretProvider` behaviour.
        provider: Elixir.BridgeSecretManager

    sender:
      url: http://adfsender.sendernm.svc.cluster.local:8081

    aws:
      region: us-east-1
      ## creds for local dev::
      creds:
        access_key_id:
          - SYSTEM:AWS_ACCESS_KEY_ID
          # - instance_role
        secret_access_key:
          - SYSTEM:AWS_SECRET_ACCESS_KEY
          # - instance_role
      ## secretsmanager local endpoint configuration for local dev:
      # secretsmanager:
      #   scheme: http://
      #   host: localhost
      #   region: us-east-1
      #   port: 4566
      debug_requests: true

    logger:
      level: debug
