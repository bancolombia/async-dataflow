// Mocks generated by Mockito 5.4.0 from annotations
// in channel_sender_client/test/transport/another_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i2.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockFoo extends _i1.Mock implements _i2.Stream<int> {
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<int> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<int> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<int> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Stream<int> asBroadcastStream({
    void Function(_i2.StreamSubscription<int>)? onListen,
    void Function(_i2.StreamSubscription<int>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.StreamSubscription<int> listen(
    void Function(int)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_0<int>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_0<int>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i2.StreamSubscription<int>);
  @override
  _i2.Stream<int> where(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<S> map<S>(S Function(int)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i2.Stream<S>.empty(),
        returnValueForMissingStub: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);
  @override
  _i2.Stream<E> asyncMap<E>(_i2.FutureOr<E> Function(int)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i2.Stream<E>.empty(),
        returnValueForMissingStub: _i2.Stream<E>.empty(),
      ) as _i2.Stream<E>);
  @override
  _i2.Stream<E> asyncExpand<E>(_i2.Stream<E>? Function(int)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i2.Stream<E>.empty(),
        returnValueForMissingStub: _i2.Stream<E>.empty(),
      ) as _i2.Stream<E>);
  @override
  _i2.Stream<int> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<S> expand<S>(Iterable<S> Function(int)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i2.Stream<S>.empty(),
        returnValueForMissingStub: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);
  @override
  _i2.Future<dynamic> pipe(_i2.StreamConsumer<int>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i2.Future<dynamic>.value(),
        returnValueForMissingStub: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Stream<S> transform<S>(
          _i2.StreamTransformer<int, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i2.Stream<S>.empty(),
        returnValueForMissingStub: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);
  @override
  _i2.Future<int> reduce(
          int Function(
    int,
    int,
  )?
              combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      int,
    )?
        combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _FakeFuture_1<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_1<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as _i2.Future<S>);
  @override
  _i2.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i2.Future<String>.value(''),
        returnValueForMissingStub: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<void> forEach(void Function(int)? action) => (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<bool> every(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<bool> any(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i2.Stream<R>.empty(),
        returnValueForMissingStub: _i2.Stream<R>.empty(),
      ) as _i2.Stream<R>);
  @override
  _i2.Future<List<int>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);
  @override
  _i2.Future<Set<int>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i2.Future<Set<int>>.value(<int>{}),
        returnValueForMissingStub: _i2.Future<Set<int>>.value(<int>{}),
      ) as _i2.Future<Set<int>>);
  @override
  _i2.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _FakeFuture_1<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_1<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
      ) as _i2.Future<E>);
  @override
  _i2.Stream<int> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<int> takeWhile(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<int> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<int> skipWhile(bool Function(int)? test) => (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Stream<int> distinct(
          [bool Function(
            int,
            int,
          )?
              equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
  @override
  _i2.Future<int> firstWhere(
    bool Function(int)? test, {
    int Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<int> lastWhere(
    bool Function(int)? test, {
    int Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<int> singleWhere(
    bool Function(int)? test, {
    int Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<int> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Stream<int> timeout(
    Duration? timeLimit, {
    void Function(_i2.EventSink<int>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i2.Stream<int>.empty(),
        returnValueForMissingStub: _i2.Stream<int>.empty(),
      ) as _i2.Stream<int>);
}
