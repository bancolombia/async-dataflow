bridge:
  port: 8080
  cloud_event_channel_identifier:
    - $.subject
  request_channel_identifier:
    - "$.req_headers['sub']"
  cloud_event_mutator:
    mutator_module: Elixir.BridgeCore.CloudEvent.Mutator.DefaultMutator
#    mutator_module: Elixir.BridgeCore.CloudEvent.Mutator.WebhookMutator
#    config:
#      webhook_url: "http://localhost:3000/content/x"
#      webhook_method: "POST"
#      webhook_headers:
#        - "Accept: application/json"
#      applies_when:
#        - key: "$.invoker"
#          comparator: "contains"
#          value: "acme"

  channel_authenticator: Elixir.BridgeRestapiAuth.PassthroughProvider
  event_bus:
    rabbitmq:
      bindings:
        - name: domainEvents
          routing_key:
            - business.#
      queue: adf_bridge_ex_queue
      
      ##
      ## Rabbitmq host and credentials can be configured with an AWS Secret, indicating the secret name.
      ## The secret must be a valid Json containing the following keys: "virtualhost", "hostname", "username",
      ## "password", "port". For example:
      ##
      ## { "username": <user name>, "password": <pw>, "hostname": <host>, "port": <port>, "virtualhost": <vhost>, "ssl": <true/false>}
      ##
      # secret: rabbitmq-secret

      ##
      ## Optionally and for local dev environments  Rabbitmq host and credentials can be configured directly 
      ## here:
#      username:
#      password:
#      hostname: localhost
#      port: 5672
#      virtualhost: /
#      ssl: false

      ## producer and processor concurrency
      producer_concurrency: 1
      producer_prefetch: 2
      processor_concurrency: 2
      processor_max_demand: 1
      
    # sqs:
    #   queue: sample-queue
    #   ##producer and processor concurrency
    #   producer_concurrency: 1
    #   producer_prefetch: 2
    #   processor_concurrency: 2
    #   processor_max_demand: 1
  topology:
    strategy: Elixir.Cluster.Strategy.Gossip
    # strategy: Elixir.Cluster.Strategy.Kubernetes
    # config: 
    #   mode: :hostname
    #   kubernetes_ip_lookup_mode: :pods
    #   kubernetes_service_name: "adfbridge-headless"
    #   kubernetes_node_basename: "channel_bridge_ex"
    #   kubernetes_selector: "cluster=beam"
    #   namespace: "bridgenm"
    #   polling_interval: 5000
#  apps:
#    - name: demo1
#      timeout: 5000

sender:
  url: http://localhost:8081

aws:
  region: us-east-1
  ## creds for local dev::
  creds:
    access_key_id:
      - SYSTEM:AWS_ACCESS_KEY_ID
      # - instance_role
    secret_access_key:
      - SYSTEM:AWS_SECRET_ACCESS_KEY
      # - instance_role
  ## secretsmanager local endpoint configuration for local dev:
  # secretsmanager:
  #   scheme: http://
  #   host: localhost
  #   region: us-east-1
  #   port: 4566
  debug_requests: true

logger:
  level: debug



